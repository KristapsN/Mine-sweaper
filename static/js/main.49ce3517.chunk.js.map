{"version":3,"sources":["components/field/field.module.scss","components/buttons/buttons.module.scss","components/popUpMesages/popup.module.scss","components/field/squer.tsx","components/buttons/start.tsx","helperFunctions/generateBombs.ts","components/buttons/flagSlider.tsx","components/buttons/restar.tsx","components/buttons/counter.tsx","components/popUpMesages/winLose.tsx","components/inputFields/dropdown.tsx","helperFunctions/generateLevel.ts","App.tsx","helperFunctions/generateGrid.ts","helperFunctions/generateNumberColor.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","Squer","x","y","openHandler","id","open","bomb","bombNumber","numberColor","flag","type","className","style","squer","squerOpen","top","left","color","onClick","squerBomb","squerFlag","Start","labelText","startHandler","hideStart","wrapper","start","GenerateBombs","bombs","bombArray","num","Math","floor","random","num2","find","item","push","length","TougleSlider","flagSwitchHandler","checkedSwitch","checked","Restart","restartHandler","restarButton","Counter","countingValue","counterNumbers","WinLose","title","paragraph","openPopup","winLoseHandler","yourResult","outerWrapper","innerWrapper","Select","valueLevel","selectHandler","name","onChange","e","value","Level","selectedOptio","bombCount","App","useState","cells","setCells","mesage","setMesage","setBombCount","flags","setFlags","launchDraw","setLaunchDraw","setHideStart","setOpenPopup","seconds","setSeconds","isActive","setIsActive","selectedOption","setSelectedOption","bombsInLevel","setBombsInLevel","useEffect","interval","setTimeout","count","clearTimeout","draw","size","gridArray","generate","j","i","uuidv4","Grid","bombsRemaining","bombLength","filter","flagLength","checkWin","winLength","winOpenAll","map","youLose","loseOpenAll","checkIfZero","l","checkNextOpenZeroStep","chekNextZerosCircle","filterNextOpenZeros","itemCells","itemZero","callCheckNext","putBombs","bombPlacement","console","log","bombField","bombNumberField","putNumberColor","allNumberColors","NumberColor","target","sletctLevelHandler","opencells","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49ce3517.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"squer\":\"field_squer__362V1\",\"squerOpen\":\"field_squerOpen__2t6UD\",\"squerBomb\":\"field_squerBomb__1EsGs\",\"squerFlag\":\"field_squerFlag__1NasY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start\":\"buttons_start__1QSVO\",\"wrapper\":\"buttons_wrapper__JrlH_\",\"restarButton\":\"buttons_restarButton__1XwYn\",\"counterNumbers\":\"buttons_counterNumbers__1-BQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"innerWrapper\":\"popup_innerWrapper__1B80l\",\"outerWrapper\":\"popup_outerWrapper__2QMMC\"};","/* eslint-disable jsx-a11y/control-has-associated-label */\r\nimport React from 'react';\r\nimport style from './field.module.scss';\r\n\r\ntype Props = {\r\n  x: number;\r\n  y: number;\r\n  id: string;\r\n  open: boolean;\r\n  bomb: boolean;\r\n  openHandler: (x: number, y: number) => void;\r\n  bombNumber: number;\r\n  numberColor: string;\r\n  flag: boolean;\r\n};\r\n\r\nexport const Squer = ({ x, y, id, openHandler, open, bomb,\r\n  bombNumber, numberColor, flag }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {!open ?\r\n        <button\r\n          type='button'\r\n          className={style.squer}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        />\r\n        :\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerOpen}`}\r\n          style={{ top: `${y}%`, left: `${x}%`, color: `${numberColor}` }}\r\n          onClick={() => openHandler(x, y)}\r\n\r\n        >{bombNumber}\r\n        </button>}\r\n      {bomb && open &&\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerBomb}`}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        >\r\n          <i className=\"fas fa-bomb\" />\r\n        </button>}\r\n      {flag &&\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerFlag}`}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        >\r\n          <i className=\"fas fa-flag\" />\r\n        </button>}\r\n\r\n\r\n    </>\r\n\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  labelText: string;\r\n  startHandler: () => void;\r\n  hideStart: boolean;\r\n};\r\n\r\nexport const Start = ({ labelText, startHandler, hideStart }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {!hideStart &&\r\n        <div className={style.wrapper}>\r\n          <button\r\n            type='button'\r\n            className={style.start}\r\n            onClick={() => startHandler()}\r\n          >{labelText}\r\n          </button>\r\n        </div>}\r\n    </>\r\n\r\n  );\r\n};","\r\nexport const GenerateBombs = (bombs: number) => {\r\n\r\n  const bombArray: number[][] = [];\r\n \r\n  while (bombArray.length < bombs) {\r\n    const num = Math.floor(Math.random() * 10);\r\n    const num2 = Math.floor(Math.random() * 10);\r\n   \r\n    if (!bombArray.find(item => item[0] === num * 10 \r\n      && item[1] === num2 * 10)) {\r\n      bombArray.push([num * 10, num2 * 10]);    \r\n    }\r\n  }\r\n  return bombArray;\r\n};\r\n\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable react/self-closing-comp */\r\nimport React from 'react';\r\nimport './switch.css';\r\n\r\ntype Props = {\r\n  flagSwitchHandler: () => void;\r\n  checkedSwitch: boolean;\r\n};\r\n\r\nexport const TougleSlider = ({ flagSwitchHandler, checkedSwitch }: Props) => {\r\n\r\n  return (\r\n    <div className=\"switch--box\">\r\n      <i className=\"fas fa-bomb\" />\r\n      <label className=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          onClick={() => flagSwitchHandler()}\r\n          checked={checkedSwitch}\r\n        />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n      <i className=\"fas fa-flag\" />\r\n    </div>\r\n  );\r\n};","import { type } from 'os';\r\nimport React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  restartHandler: () => void;\r\n};\r\n\r\nexport const Restart = ({ restartHandler }: Props) => {\r\n\r\n  return (\r\n\r\n    <button\r\n      type='button'\r\n      onClick={() => restartHandler()}\r\n      className={style.restarButton}\r\n    >\r\n      <i className=\"fas fa-sync\" />\r\n    </button>\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  countingValue: number;\r\n};\r\n\r\nexport const Counter = ({ countingValue }: Props) => {\r\n\r\n  return (\r\n\r\n    <h2 \r\n      className={style.counterNumbers}\r\n    >\r\n      {countingValue}\r\n    </h2>\r\n  );\r\n};","import React from 'react';\r\nimport style from './popup.module.scss';\r\n\r\ntype Props = {\r\n  title: string;\r\n  paragraph: string;\r\n  openPopup: boolean;\r\n  winLoseHandler: () => void;\r\n  yourResult: number;\r\n};\r\n\r\nexport const WinLose = ({ title, paragraph, openPopup, winLoseHandler, yourResult }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      { openPopup &&\r\n        <div className={style.outerWrapper}>\r\n          <div className={style.innerWrapper}>\r\n            <h1>{title}</h1>\r\n            <h2>{yourResult}</h2>\r\n            <p>{paragraph}</p>\r\n            \r\n            <button\r\n              type=\"button\"\r\n              onClick={() => winLoseHandler()}\r\n            >\r\n              x\r\n            </button>\r\n          </div>\r\n        </div>}\r\n    </>\r\n  );\r\n};","import React from 'react';\r\n\r\ntype Props = {\r\n  valueLevel: string\r\n  selectHandler: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n};\r\n\r\nexport const Select = ({ valueLevel, selectHandler }: Props) => {\r\n\r\n  return (\r\n    <div>\r\n      <select\r\n        name=\"expr\"\r\n        id=\"expr\"\r\n        onChange={(e) => selectHandler(e)}\r\n        value={valueLevel}\r\n      >\r\n        <option value=\"Chose\">Chose</option>\r\n        <option value=\"Easy\">Easy</option>\r\n        <option value=\"Medium\">Medium</option>\r\n        <option value=\"Hard\">Hard</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};","export const Level = (selectedOptio: string) => {\r\n  let bombCount = 10;\r\n  switch (selectedOptio) {\r\n    case 'Easy':\r\n      bombCount = 10;\r\n      break;\r\n    case 'Medium':\r\n      bombCount = 20;\r\n      break;\r\n    case 'Hard':\r\n      bombCount = 30;\r\n      break;\r\n  }\r\n\r\n  // if (selectedOptio === 'Easy'){\r\n  //   bombCount = 10;\r\n  // } else if (selectedOptio === 'Medium'){\r\n  //   bombCount = 20;\r\n  // } else if (selectedOptio === 'Hard'){\r\n  //   bombCount = 30;\r\n  // }\r\n  return bombCount;\r\n};","/* eslint-disable no-param-reassign */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'flexboxgrid';\r\nimport { Squer } from './components/field/squer';\r\nimport { Start } from './components/buttons/start';\r\nimport { Grid } from './helperFunctions/generateGrid';\r\nimport { GenerateBombs } from './helperFunctions/generateBombs';\r\nimport { NumberColor } from './helperFunctions/generateNumberColor';\r\nimport { TougleSlider } from './components/buttons/flagSlider';\r\nimport { Restart } from './components/buttons/restar';\r\nimport { Counter } from './components/buttons/counter';\r\nimport { WinLose } from './components/popUpMesages/winLose';\r\nimport { Select } from './components/inputFields/dropdown';\r\nimport { Level } from './helperFunctions/generateLevel';\r\n\r\n\r\ntype Cells = {\r\n  id: string\r\n  x: number\r\n  y: number\r\n  open: boolean\r\n  flag: boolean\r\n  bomb: boolean\r\n  bombNumber: number\r\n  color: string\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const [cells, setCells] = useState<Cells[]>([]);\r\n  const [mesage, setMesage] = useState('');\r\n  const [bombCount, setBombCount] = useState(0);\r\n  const [flags, setFlags] = useState(false);\r\n  const [launchDraw, setLaunchDraw] = useState(false);\r\n  const [hideStart, setHideStart] = useState(false);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [bombsInLevel, setBombsInLevel] = useState(10);\r\n\r\n  const size = 10;\r\n  // const bombs = 20;\r\n\r\n\r\n\r\n  const winLoseHandler = () => {\r\n    setOpenPopup(!openPopup);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval = 0;\r\n    if (isActive) {\r\n      // @ts-ignore\r\n      interval = setTimeout(() => {\r\n        let count = seconds;\r\n        setSeconds(count += 1);\r\n      }, 1000);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearTimeout(interval);\r\n    }\r\n    return () => clearTimeout(interval);\r\n  }, [isActive, seconds]);\r\n\r\n\r\n  useEffect(() => {\r\n    draw();\r\n    setBombCount(0);\r\n  }, [launchDraw]);\r\n\r\n\r\n  const draw = () => {\r\n    setCells(Grid(size));\r\n  };\r\n\r\n  const start = () => {\r\n    putBombs();\r\n    putNumberColor();\r\n    setHideStart(!hideStart);\r\n    bombsRemaining();\r\n    setIsActive(true);\r\n  };\r\n\r\n  const reStart = () => {\r\n    let clearField = [...cells];\r\n    clearField = [];\r\n    setCells(clearField);\r\n    setLaunchDraw(!launchDraw);\r\n    setHideStart(!hideStart);\r\n    setMesage('');\r\n    setIsActive(false);\r\n    setSeconds(0);\r\n  };\r\n\r\n  const flagHandler = () => {\r\n    setFlags(!flags);\r\n  };\r\n\r\n  const bombsRemaining = () => {\r\n    const bombLength = cells.filter(item => item.bomb === true);\r\n    const flagLength = cells.filter(item => item.flag === true);\r\n    setBombCount(bombLength.length - flagLength.length);\r\n  };\r\n\r\n  const openHandler = (x: number, y: number) => {\r\n    const opencells = [...cells];\r\n    opencells.map((item) => {\r\n      if (item.x === x && item.y === y && flags) {\r\n        item.flag = !item.flag;\r\n        item.open = false;\r\n      } else if (item.x === x && item.y === y) {\r\n        item.open = true;\r\n        if (item.bomb) {\r\n          youLose();\r\n        }\r\n        if (item.bombNumber === 0) {\r\n          checkIfZero(x, y);\r\n        }\r\n      }\r\n    });\r\n    setCells(opencells);\r\n    callCheckNext();\r\n    checkWin();\r\n    bombsRemaining();\r\n  };\r\n\r\n  const checkWin = () => {\r\n    const winLength = cells.length - bombsInLevel;\r\n    const winField = cells.filter(item => item.open === true);\r\n    if (winField.length === winLength) {\r\n      setMesage('You Win!');\r\n      const winOpenAll = [...cells];\r\n      winOpenAll.map((item) => {\r\n        item.open = true;\r\n        setCells(winOpenAll);\r\n        setIsActive(false);\r\n        setOpenPopup(!openPopup);\r\n      });\r\n    }\r\n  };\r\n  const youLose = () => {\r\n    setMesage('You Loese');\r\n    const loseOpenAll = [...cells];\r\n    loseOpenAll.map((item) => {\r\n      item.open = true;\r\n      setCells(loseOpenAll);\r\n      setIsActive(false);\r\n      setOpenPopup(!openPopup);\r\n    });\r\n  };\r\n\r\n  const checkIfZero = (x: number, y: number) => {\r\n    const chekZeros = [...cells];\r\n    chekZeros.map((item) => {\r\n      for (let i = -1; i < 2; i++) {\r\n        for (let l = -1; l < 2; l++) {\r\n          if (item.x === x + 10 * i && item.y === y + 10 * l\r\n            && item.bomb === false) {\r\n            item.open = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkNextOpenZeroStep = () => {\r\n    const chekNextZerosCircle = [...cells];\r\n    const filterNextOpenZeros = cells.filter(item => item.bombNumber ===\r\n      0 && item.open === true);\r\n    cells.map((itemCells) => {\r\n      filterNextOpenZeros.map((itemZero) => {\r\n        for (let i = -1; i < 2; i++) {\r\n          for (let l = -1; l < 2; l++) {\r\n            if (itemCells.x === itemZero.x + 10 * i && itemCells.y ===\r\n              itemZero.y + 10 * l && itemCells.bomb === false) {\r\n              itemCells.open = true;\r\n              setCells(chekNextZerosCircle);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const callCheckNext = () => {\r\n    if (!flags) {\r\n      for (let i = 0; i < 20; i++) {\r\n        checkNextOpenZeroStep();\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const putBombs = () => {\r\n    const bombPlacement = GenerateBombs(bombsInLevel);\r\n    console.log(GenerateBombs(bombsInLevel));\r\n    const bombField = [...cells];\r\n    bombField.map((item) => {\r\n      for (let i = 0; i < bombPlacement.length; i++) {\r\n        if (item.x === bombPlacement[i][0] && item.y === bombPlacement[i][1]\r\n          && item.bomb === false) {\r\n          item.bomb = true;\r\n        }\r\n      }\r\n    });\r\n    setCells(bombField);\r\n    const bombNumberField = [...cells];\r\n    cells.map((item) => {\r\n      for (let j = 0; j < bombPlacement.length; j++) {\r\n        for (let i = -1; i < 2; i++) {\r\n          for (let l = -1; l < 2; l++) {\r\n            if (item.x === bombPlacement[j][0] + 10 * i &&\r\n              item.y === bombPlacement[j][1] + -10 * l) {\r\n              item.bombNumber += 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    setCells(bombNumberField);\r\n  };\r\n\r\n  const putNumberColor = () => {\r\n    const allNumberColors = [...cells];\r\n    cells.map((item) => {\r\n      item.color = NumberColor(item.bombNumber);\r\n      setCells(allNumberColors);\r\n    });\r\n  };\r\n\r\n  const sletctLevelHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedOption(e.target.value);\r\n    console.log(e.target.value);\r\n    setBombsInLevel(Level(e.target.value));\r\n    console.log(Level(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-offset-3 col-md-6 col-xs-12\">\r\n            <WinLose\r\n              openPopup={openPopup}\r\n              title={mesage}\r\n              paragraph='Play again?'\r\n              winLoseHandler={() => winLoseHandler()}\r\n              yourResult={seconds}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-offset-3 col-md-6 col-xs-12\">\r\n            <div className=\"top--menu margin--botom--20\">\r\n              <Select\r\n                selectHandler={(e) => sletctLevelHandler(e)}\r\n                valueLevel={selectedOption}\r\n              />\r\n              <Restart\r\n                restartHandler={() => reStart()}\r\n              />\r\n            </div>\r\n            <div className=\"counter margin--botom--20\">\r\n              <div className=\"counter--bombs\">\r\n                <i className=\"fas fa-clock\" />\r\n                <Counter\r\n                  countingValue={seconds}\r\n                />\r\n              </div>\r\n              <TougleSlider\r\n                flagSwitchHandler={() => flagHandler()}\r\n                checkedSwitch={flags}\r\n              />\r\n              <div className=\"counter--bombs\">\r\n                <i className=\"fas fa-bomb\" />\r\n                <Counter\r\n                  countingValue={bombCount}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"game--grid\">\r\n              <Start\r\n                labelText='Start'\r\n                startHandler={() => start()}\r\n                hideStart={hideStart}\r\n              />\r\n              {cells.map((item) =>\r\n                <div key={item.id}>\r\n                  <Squer\r\n                    x={item.x}\r\n                    y={item.y}\r\n                    id={item.id}\r\n                    openHandler={(x, y) =>\r\n                      openHandler(item.x, item.y)}\r\n                    open={item.open}\r\n                    bomb={item.bomb}\r\n                    bombNumber={item.bombNumber}\r\n                    numberColor={item.color}\r\n                    flag={item.flag}\r\n                  />\r\n                </div>)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const Grid = (size: number) => {\r\n  const example = { id: '1', x: 0, y: 0, open: false, flag: false, bomb: false, bombNumber: 0, color: 'red' };\r\n  const gridArray = [];\r\n  let generate = example;\r\n  for (let j = 0; j <= size-1; j++) {\r\n    for (let i = 0; i <= size-1; i++) {\r\n      const setId = uuidv4();\r\n      generate = {\r\n        id: setId, x: i * 10, y: j * 10, open: false, bomb: false,\r\n        flag: false, bombNumber: 0, color: 'red'\r\n      };\r\n      gridArray.push(generate);\r\n    }\r\n  }\r\n  return gridArray;\r\n};\r\n\r\n","export const NumberColor = (bombNumber: number) => {\r\n\r\n  let color = 'red';\r\n  switch (bombNumber) {\r\n    case 0:\r\n      color = 'rgb(201, 201, 201, 0)';\r\n      break;\r\n    case 1:\r\n      color = 'rgb(0, 4, 212)';\r\n      break;\r\n    case 2:\r\n      color = 'rgb(0, 177, 59)';\r\n      break;\r\n    case 3:\r\n      color = 'rgb(177, 130, 0)';\r\n      break;\r\n    case 4:\r\n      color = 'rgb(0, 142, 177)'; \r\n      break;\r\n    case 5:\r\n      color = 'rgb(121, 0, 177)';\r\n      break;\r\n    case 6:\r\n      color = 'rgb(177, 0, 147)';\r\n      break;\r\n    case 7:\r\n      color = 'rgb(177, 0, 0)';\r\n      break;\r\n    case 8:\r\n      color = 'rgb(0, 0, 0)';\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}