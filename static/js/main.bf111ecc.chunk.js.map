{"version":3,"sources":["components/field/field.module.scss","components/buttons/buttons.module.scss","components/popUpMesages/popup.module.scss","components/inputFields/input.module.scss","components/field/squer.tsx","components/buttons/start.tsx","helperFunctions/generateBombs.ts","components/buttons/flagSlider.tsx","components/buttons/restar.tsx","components/buttons/counter.tsx","components/inputFields/textInput.tsx","components/buttons/submit.tsx","components/popUpMesages/winLose.tsx","components/inputFields/dropdown.tsx","components/field/score.tsx","App.tsx","helperFunctions/generateGrid.ts","helperFunctions/generateNumberColor.ts","helperFunctions/generateLevel.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","Squer","x","y","openHandler","id","open","bomb","bombNumber","numberColor","flag","type","className","style","squer","squerOpen","top","left","color","onClick","squerBomb","squerFlag","Start","labelText","startHandler","hideStart","wrapper","start","GenerateBombs","bombs","bombArray","num","Math","floor","random","num2","find","item","push","length","TougleSlider","flagSwitchHandler","checkedSwitch","onChange","checked","Restart","restartHandler","restarButton","Counter","countingValue","counterNumbers","ChoseNumber","inputValue","inputHandler","value","e","dropdown","Submit","submittHandler","submitValue","submitButton","WinLose","title","paragraph","openPopup","winLoseHandler","yourResult","lose","outerWrapper","innerWrapper","closeButton","Select","valueLevel","selectHandler","name","Score","place","score","socoreLine","App","fullScore","localStorage","JSON","parse","useState","cells","setCells","mesage","setMesage","bombCount","setBombCount","flags","setFlags","launchDraw","setLaunchDraw","setHideStart","setOpenPopup","seconds","setSeconds","isActive","setIsActive","selectedOption","setSelectedOption","bombsInLevel","setBombsInLevel","inputName","setInputName","scoreBoard","setScoreBoard","stringify","useEffect","interval","setTimeout","count","clearTimeout","draw","size","gridArray","generate","j","i","uuidv4","Grid","bombsRemaining","bombLength","filter","flagLength","checkWin","winLength","winOpenAll","map","youLose","loseOpenAll","checkIfZero","l","checkNextOpenZeroStep","chekNextZerosCircle","filterNextOpenZeros","itemCells","itemZero","callCheckNext","putBombs","bombPlacement","console","log","bombField","bombNumberField","putNumberColor","allNumberColors","NumberColor","target","inputNameHandler","selectedOptio","Level","sletctLevelHandler","opencells","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf111ecc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"squer\":\"field_squer__362V1\",\"squerOpen\":\"field_squerOpen__2t6UD\",\"squerBomb\":\"field_squerBomb__1EsGs\",\"squerFlag\":\"field_squerFlag__1NasY\",\"socoreLine\":\"field_socoreLine__LHT15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start\":\"buttons_start__1QSVO\",\"wrapper\":\"buttons_wrapper__JrlH_\",\"restarButton\":\"buttons_restarButton__1XwYn\",\"counterNumbers\":\"buttons_counterNumbers__1-BQD\",\"submitButton\":\"buttons_submitButton__3mZ6t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"innerWrapper\":\"popup_innerWrapper__1B80l\",\"outerWrapper\":\"popup_outerWrapper__2QMMC\",\"closeButton\":\"popup_closeButton__z60Pv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"input_dropdown__26NA2\"};","/* eslint-disable jsx-a11y/control-has-associated-label */\r\nimport React from 'react';\r\nimport style from './field.module.scss';\r\n\r\ntype Props = {\r\n  x: number;\r\n  y: number;\r\n  id: string;\r\n  open: boolean;\r\n  bomb: boolean;\r\n  openHandler: (x: number, y: number) => void;\r\n  bombNumber: number;\r\n  numberColor: string;\r\n  flag: boolean;\r\n};\r\n\r\nexport const Squer = ({ x, y, id, openHandler, open, bomb,\r\n  bombNumber, numberColor, flag }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {!open ?\r\n        <button\r\n          type='button'\r\n          className={style.squer}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        />\r\n        :\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerOpen}`}\r\n          style={{ top: `${y}%`, left: `${x}%`, color: `${numberColor}` }}\r\n          onClick={() => openHandler(x, y)}\r\n\r\n        >{bombNumber}\r\n        </button>}\r\n      {bomb && open &&\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerBomb}`}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        >\r\n          <i className=\"fas fa-bomb\" />\r\n        </button>}\r\n      {flag &&\r\n        <button\r\n          type='button'\r\n          className={`${style.squer} ${style.squerFlag}`}\r\n          style={{ top: `${y}%`, left: `${x}%` }}\r\n          onClick={() => openHandler(x, y)}\r\n        >\r\n          <i className=\"fas fa-flag\" />\r\n        </button>}\r\n\r\n\r\n    </>\r\n\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  labelText: string;\r\n  startHandler: () => void;\r\n  hideStart: boolean;\r\n};\r\n\r\nexport const Start = ({ labelText, startHandler, hideStart }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {!hideStart &&\r\n        <div className={style.wrapper}>\r\n          <button\r\n            type='button'\r\n            className={style.start}\r\n            onClick={() => startHandler()}\r\n          >{labelText}\r\n          </button>\r\n        </div>}\r\n    </>\r\n\r\n  );\r\n};","\r\nexport const GenerateBombs = (bombs: number) => {\r\n\r\n  const bombArray: number[][] = [];\r\n \r\n  while (bombArray.length < bombs) {\r\n    const num = Math.floor(Math.random() * 10);\r\n    const num2 = Math.floor(Math.random() * 10);\r\n   \r\n    if (!bombArray.find(item => item[0] === num * 10 \r\n      && item[1] === num2 * 10)) {\r\n      bombArray.push([num * 10, num2 * 10]);    \r\n    }\r\n  }\r\n  return bombArray;\r\n};\r\n\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable react/self-closing-comp */\r\nimport React from 'react';\r\nimport './switch.css';\r\n\r\ntype Props = {\r\n  flagSwitchHandler: () => void;\r\n  checkedSwitch: boolean;\r\n};\r\n\r\nexport const TougleSlider = ({ flagSwitchHandler, checkedSwitch }: Props) => {\r\n\r\n  return (\r\n    <div className=\"switch--box\">\r\n      <i className=\"fas fa-bomb\" />\r\n      <label className=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => flagSwitchHandler()}\r\n          checked={checkedSwitch}\r\n        />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n      <i className=\"fas fa-flag\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  restartHandler: () => void;\r\n};\r\n\r\nexport const Restart = ({ restartHandler }: Props) => {\r\n  \r\n  return (\r\n    <button\r\n      type='button'\r\n      onClick={() => restartHandler()}\r\n      className={style.restarButton}\r\n    >\r\n      <i className=\"fas fa-sync\" />\r\n    </button>\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  countingValue: number;\r\n};\r\n\r\nexport const Counter = ({ countingValue }: Props) => {\r\n\r\n  return (\r\n\r\n    <h2 \r\n      className={style.counterNumbers}\r\n    >\r\n      {countingValue}\r\n    </h2>\r\n  );\r\n};","import React from 'react';\r\nimport style from './input.module.scss';\r\n\r\ntype Props = {\r\n  inputValue: string\r\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n\r\n};\r\n\r\nexport const ChoseNumber = ({ inputValue, inputHandler }: Props) => {\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\"\r\n        value={inputValue} \r\n        onChange={(e)=> inputHandler(e)}\r\n        className={style.dropdown}\r\n      />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport style from './buttons.module.scss';\r\n\r\ntype Props = {\r\n  submittHandler: () => void;\r\n  submitValue: string;\r\n};\r\n\r\nexport const Submit = ({ submittHandler, submitValue }: Props) => {\r\n  \r\n  return (\r\n    <button\r\n      type='button'\r\n      onClick={() => submittHandler()}\r\n      className={style.submitButton}\r\n    >\r\n      {submitValue}\r\n    </button>\r\n  );\r\n};","import React from 'react';\r\nimport style from './popup.module.scss';\r\nimport { ChoseNumber } from '../inputFields/textInput';\r\nimport { Submit } from '../buttons/submit';\r\n\r\ntype Props = {\r\n  title: string;\r\n  paragraph: string;\r\n  openPopup: boolean;\r\n  winLoseHandler: () => void;\r\n  yourResult: number;\r\n  inputValue: string;\r\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  submittHandler: () => void;\r\n  submitValue: string;\r\n  lose: string\r\n\r\n};\r\n\r\nexport const WinLose = ({ title, paragraph, openPopup, winLoseHandler,\r\n  yourResult, inputValue, inputHandler, submittHandler, submitValue, lose }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {lose === 'You Win!' ?\r\n        <>\r\n          { openPopup &&\r\n            <div className={style.outerWrapper}>\r\n              <div className={style.innerWrapper}>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => winLoseHandler()}\r\n                  className={style.closeButton}\r\n                >\r\n                  x\r\n                </button>\r\n                <h1>{title}</h1>\r\n                <h3>Your score: {yourResult}s</h3>\r\n                <p>{paragraph}</p>\r\n                <ChoseNumber\r\n                  inputValue={inputValue}\r\n                  inputHandler={(e) => inputHandler(e)}\r\n                />\r\n                <Submit\r\n                  submittHandler={() => submittHandler()}\r\n                  submitValue={submitValue}\r\n                />\r\n              </div>\r\n            </div>}\r\n        </>\r\n        :\r\n        <>\r\n          { openPopup &&\r\n            <div className={style.outerWrapper}>\r\n              <div className={style.innerWrapper}>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => winLoseHandler()}\r\n                  className={style.closeButton}\r\n                >\r\n                  x\r\n                </button>\r\n                <h1>{title}</h1>\r\n              </div>\r\n            </div>}\r\n        </>}\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport style from './input.module.scss';\r\n\r\ntype Props = {\r\n  valueLevel: string\r\n  selectHandler: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n};\r\n\r\nexport const Select = ({ valueLevel, selectHandler }: Props) => {\r\n\r\n  return (\r\n    <div>\r\n      <select\r\n        className={style.dropdown}\r\n        name=\"expr\"\r\n        id=\"expr\"\r\n        onChange={(e) => selectHandler(e)}\r\n        value={valueLevel}\r\n      >\r\n        <option value=\"Chose\">Chose</option>\r\n        <option value=\"Easy\">Easy</option>\r\n        <option value=\"Medium\">Medium</option>\r\n        <option value=\"Hard\">Hard</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport style from './field.module.scss';\r\n\r\ntype Props = {\r\n  place: number;\r\n  name: string;\r\n  score: number;\r\n};\r\n\r\nexport const Score = ({place, name, score}: Props) => {\r\n\r\n  return (\r\n    <div className={style.socoreLine}>\r\n     \r\n      <span>{place+1}. </span>\r\n      <span>{name} </span>\r\n      <span>{score}s </span>\r\n    </div>\r\n  );\r\n};","/* eslint-disable no-param-reassign */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'flexboxgrid';\r\nimport { Squer } from './components/field/squer';\r\nimport { Start } from './components/buttons/start';\r\nimport { Grid } from './helperFunctions/generateGrid';\r\nimport { GenerateBombs } from './helperFunctions/generateBombs';\r\nimport { NumberColor } from './helperFunctions/generateNumberColor';\r\nimport { TougleSlider } from './components/buttons/flagSlider';\r\nimport { Restart } from './components/buttons/restar';\r\nimport { Counter } from './components/buttons/counter';\r\nimport { WinLose } from './components/popUpMesages/winLose';\r\nimport { Select } from './components/inputFields/dropdown';\r\nimport { Level } from './helperFunctions/generateLevel';\r\nimport { Score } from './components/field/score';\r\n\r\ntype Cells = {\r\n  id: string\r\n  x: number\r\n  y: number\r\n  open: boolean\r\n  flag: boolean\r\n  bomb: boolean\r\n  bombNumber: number\r\n  color: string\r\n};\r\ntype ScoreArr = {\r\n  place: number\r\n  name: string\r\n  score: number\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const fullScore: ScoreArr[] = localStorage.score ? JSON.parse(localStorage.score) : [];\r\n  const [cells, setCells] = useState<Cells[]>([]);\r\n  const [mesage, setMesage] = useState('');\r\n  const [bombCount, setBombCount] = useState(0);\r\n  const [flags, setFlags] = useState(false);\r\n  const [launchDraw, setLaunchDraw] = useState(false);\r\n  const [hideStart, setHideStart] = useState(false);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [bombsInLevel, setBombsInLevel] = useState(10);\r\n  const [inputName, setInputName] = useState('');\r\n  const [scoreBoard, setScoreBoard] = useState<ScoreArr>();\r\n\r\n  localStorage.score = JSON.stringify(fullScore);\r\n\r\n  const size = 10;\r\n\r\n  const winLoseHandler = () => {\r\n    setOpenPopup(!openPopup);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval = 0;\r\n    if (isActive) {\r\n      // @ts-ignore\r\n      interval = setTimeout(() => {\r\n        let count = seconds;\r\n        setSeconds(count += 1);\r\n      }, 1000);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearTimeout(interval);\r\n    }\r\n    return () => clearTimeout(interval);\r\n  }, [isActive, seconds]);\r\n\r\n  useEffect(() => {\r\n    draw();\r\n    setBombCount(0);\r\n  }, [launchDraw]);\r\n\r\n  const draw = () => {\r\n    setCells(Grid(size));\r\n  };\r\n\r\n  const start = () => {\r\n    putBombs();\r\n    putNumberColor();\r\n    setHideStart(!hideStart);\r\n    bombsRemaining();\r\n    setIsActive(true);\r\n  };\r\n\r\n  const reStart = () => {\r\n    let clearField = [...cells];\r\n    clearField = [];\r\n    setCells(clearField);\r\n    setLaunchDraw(!launchDraw);\r\n    setHideStart(!hideStart);\r\n    setMesage('');\r\n    setIsActive(false);\r\n    setSeconds(0);\r\n  };\r\n\r\n  const flagHandler = () => {\r\n    setFlags(!flags);\r\n  };\r\n\r\n  const bombsRemaining = () => {\r\n    const bombLength = cells.filter(item => item.bomb === true);\r\n    const flagLength = cells.filter(item => item.flag === true);\r\n    setBombCount(bombLength.length - flagLength.length);\r\n  };\r\n\r\n  const openHandler = (x: number, y: number) => {\r\n    const opencells = [...cells];\r\n    opencells.map((item) => {\r\n      if (item.x === x && item.y === y && flags) {\r\n        item.flag = !item.flag;\r\n        item.open = false;\r\n      } else if (item.x === x && item.y === y) {\r\n        item.open = true;\r\n        if (item.bomb) {\r\n          youLose();\r\n        }\r\n        if (item.bombNumber === 0) {\r\n          checkIfZero(x, y);\r\n        }\r\n      }\r\n    });\r\n    setCells(opencells);\r\n    callCheckNext();\r\n    checkWin();\r\n    bombsRemaining();\r\n  };\r\n\r\n  const checkWin = () => {\r\n    const winLength = cells.length - bombsInLevel;\r\n    const winField = cells.filter(item => item.open === true);\r\n    if (winField.length === winLength) {\r\n      setMesage('You Win!');\r\n      const winOpenAll = [...cells];\r\n      winOpenAll.map((item) => {\r\n        item.open = true;\r\n        setCells(winOpenAll);\r\n        setIsActive(false);\r\n        setOpenPopup(!openPopup);\r\n      });\r\n    }\r\n  };\r\n  const youLose = () => {\r\n    setMesage('You Loese');\r\n    const loseOpenAll = [...cells];\r\n    loseOpenAll.map((item) => {\r\n      item.open = true;\r\n      setCells(loseOpenAll);\r\n      setIsActive(false);\r\n      setOpenPopup(!openPopup);\r\n    });\r\n  };\r\n\r\n  const checkIfZero = (x: number, y: number) => {\r\n    const chekZeros = [...cells];\r\n    chekZeros.map((item) => {\r\n      for (let i = -1; i < 2; i++) {\r\n        for (let l = -1; l < 2; l++) {\r\n          if (item.x === x + 10 * i && item.y === y + 10 * l\r\n            && item.bomb === false) {\r\n            item.open = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkNextOpenZeroStep = () => {\r\n    const chekNextZerosCircle = [...cells];\r\n    const filterNextOpenZeros = cells.filter(item => item.bombNumber ===\r\n      0 && item.open === true);\r\n    cells.map((itemCells) => {\r\n      filterNextOpenZeros.map((itemZero) => {\r\n        for (let i = -1; i < 2; i++) {\r\n          for (let l = -1; l < 2; l++) {\r\n            if (itemCells.x === itemZero.x + 10 * i && itemCells.y ===\r\n              itemZero.y + 10 * l && itemCells.bomb === false) {\r\n              itemCells.open = true;\r\n              setCells(chekNextZerosCircle);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const callCheckNext = () => {\r\n    if (!flags) {\r\n      for (let i = 0; i < 20; i++) {\r\n        checkNextOpenZeroStep();\r\n      }\r\n    }\r\n  };\r\n\r\n  const putBombs = () => {\r\n    const bombPlacement = GenerateBombs(bombsInLevel);\r\n    console.log(GenerateBombs(bombsInLevel));\r\n    const bombField = [...cells];\r\n    bombField.map((item) => {\r\n      for (let i = 0; i < bombPlacement.length; i++) {\r\n        if (item.x === bombPlacement[i][0] && item.y === bombPlacement[i][1]\r\n          && item.bomb === false) {\r\n          item.bomb = true;\r\n        }\r\n      }\r\n    });\r\n    setCells(bombField);\r\n    const bombNumberField = [...cells];\r\n    cells.map((item) => {\r\n      for (let j = 0; j < bombPlacement.length; j++) {\r\n        for (let i = -1; i < 2; i++) {\r\n          for (let l = -1; l < 2; l++) {\r\n            if (item.x === bombPlacement[j][0] + 10 * i &&\r\n              item.y === bombPlacement[j][1] + -10 * l) {\r\n              item.bombNumber += 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    setCells(bombNumberField);\r\n  };\r\n\r\n  const putNumberColor = () => {\r\n    const allNumberColors = [...cells];\r\n    cells.map((item) => {\r\n      item.color = NumberColor(item.bombNumber);\r\n      setCells(allNumberColors);\r\n    });\r\n  };\r\n\r\n  const sletctLevelHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedOption(e.target.value);\r\n    setBombsInLevel(Level(e.target.value));\r\n  };\r\n\r\n  const inputNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputName(e.target.value);\r\n  };\r\n  const submittHandler = () => {\r\n    setScoreBoard({\r\n      place: 1,\r\n      name: inputName,\r\n      score: seconds\r\n    });\r\n    setInputName('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (scoreBoard) {\r\n      fullScore.push(scoreBoard);\r\n      localStorage.score = JSON.stringify(fullScore);\r\n      setOpenPopup(false);\r\n    }\r\n  }, [scoreBoard]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-offset-2 col-md-8 col-xs-12\">\r\n            <WinLose\r\n              openPopup={openPopup}\r\n              title={mesage}\r\n              paragraph='Your name:'\r\n              winLoseHandler={() => winLoseHandler()}\r\n              yourResult={seconds}\r\n              inputHandler={(e) => inputNameHandler(e)}\r\n              inputValue={inputName}\r\n              submitValue='Submit'\r\n              submittHandler={() => submittHandler()}\r\n              lose={mesage}\r\n\r\n            />\r\n            <div className=\"top--menu margin--botom--20\">\r\n              <span>Level:</span>&nbsp;\r\n              <Select\r\n                selectHandler={(e) => sletctLevelHandler(e)}\r\n                valueLevel={selectedOption}\r\n              />\r\n              <Restart\r\n                restartHandler={() => reStart()}\r\n              />\r\n            </div>\r\n            <div className=\"counter margin--botom--20\">\r\n              <div className=\"counter--bombs\">\r\n                <i className=\"fas fa-clock\" />\r\n                <Counter\r\n                  countingValue={seconds}\r\n                />\r\n              </div>\r\n              <TougleSlider\r\n                flagSwitchHandler={() => flagHandler()}\r\n                checkedSwitch={flags}\r\n              />\r\n              <div className=\"counter--bombs\">\r\n                <i className=\"fas fa-bomb\" />\r\n                <Counter\r\n                  countingValue={bombCount}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8 col-xs-12\">\r\n                <div className=\"game--grid--score\">\r\n                  <div className=\"game--grid margin--botom--20\">\r\n                    <Start\r\n                      labelText='Start'\r\n                      startHandler={() => start()}\r\n                      hideStart={hideStart}\r\n                    />\r\n                    {cells.map((item) =>\r\n                      <div key={item.id}>\r\n                        <Squer\r\n                          x={item.x}\r\n                          y={item.y}\r\n                          id={item.id}\r\n                          openHandler={(x, y) =>\r\n                            openHandler(item.x, item.y)}\r\n                          open={item.open}\r\n                          bomb={item.bomb}\r\n                          bombNumber={item.bombNumber}\r\n                          numberColor={item.color}\r\n                          flag={item.flag}\r\n                        />\r\n                      </div>)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4 col-xs-12\">\r\n                <div className=\"game--score\">\r\n                  <h1>Your scores</h1>\r\n                  {fullScore.map(({ name, score }, index) =>\r\n                    <>\r\n                      <Score\r\n                        place={index}\r\n                        name={name}\r\n                        score={score}\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const Grid = (size: number) => {\r\n  const example = { id: '1', x: 0, y: 0, open: false, flag: false, bomb: false, bombNumber: 0, color: 'red' };\r\n  const gridArray = [];\r\n  let generate = example;\r\n  for (let j = 0; j <= size-1; j++) {\r\n    for (let i = 0; i <= size-1; i++) {\r\n      const setId = uuidv4();\r\n      generate = {\r\n        id: setId, x: i * 10, y: j * 10, open: false, bomb: false,\r\n        flag: false, bombNumber: 0, color: 'red'\r\n      };\r\n      gridArray.push(generate);\r\n    }\r\n  }\r\n  return gridArray;\r\n};\r\n\r\n","export const NumberColor = (bombNumber: number) => {\r\n\r\n  let color = 'red';\r\n  switch (bombNumber) {\r\n    case 0:\r\n      color = 'rgb(201, 201, 201, 0)';\r\n      break;\r\n    case 1:\r\n      color = 'rgb(0, 4, 212)';\r\n      break;\r\n    case 2:\r\n      color = 'rgb(0, 177, 59)';\r\n      break;\r\n    case 3:\r\n      color = 'rgb(177, 130, 0)';\r\n      break;\r\n    case 4:\r\n      color = 'rgb(0, 142, 177)'; \r\n      break;\r\n    case 5:\r\n      color = 'rgb(121, 0, 177)';\r\n      break;\r\n    case 6:\r\n      color = 'rgb(177, 0, 147)';\r\n      break;\r\n    case 7:\r\n      color = 'rgb(177, 0, 0)';\r\n      break;\r\n    case 8:\r\n      color = 'rgb(0, 0, 0)';\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\n","export const Level = (selectedOptio: string) => {\r\n  let bombCount = 10;\r\n  switch (selectedOptio) {\r\n    case 'Easy':\r\n      bombCount = 10;\r\n      break;\r\n    case 'Medium':\r\n      bombCount = 15;\r\n      break;\r\n    case 'Hard':\r\n      bombCount = 20;\r\n      break;\r\n  }\r\n  return bombCount;\r\n};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}